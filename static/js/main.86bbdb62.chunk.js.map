{"version":3,"sources":["componets/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","title","responsible","description","priority","handleInput","bind","handleSubmit","e","value","target","name","this","setState","preventDefault","props","onAddTodo","document","querySelector","reset","className","onSubmit","type","onChange","placeholder","rows","Component","App","todos","addTodo","todo","index","window","confirm","filter","t","i","tasks","map","key","onClick","removeTodo","length","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0tBAgEeA,G,kBA7Db,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAO,GACPC,YAAa,GACbC,YAAa,GACbC,SAAU,UAEZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATR,E,yEAYFE,GACV,IAAMC,EAAQD,EAAEE,OAAOD,MACjBE,EAAOH,EAAEE,OAAOC,KACtBC,KAAKC,SAAL,eAAiBF,EAAOF,M,mCAGbD,GACXA,EAAEM,iBACFF,KAAKG,MAAMC,UAAUJ,KAAKZ,OAC1BiB,SAASC,cAAc,cAAcC,U,+BAIrC,OACE,0BAAMC,UAAU,YAAYC,SAAUT,KAAKL,cACzC,wBAAIa,UAAU,cAAd,YAGA,2BACEE,KAAK,OACLF,UAAU,eACVT,KAAK,QACLY,SAAUX,KAAKP,YACfmB,YAAY,UACd,2BACEF,KAAK,OACLF,UAAU,eACVT,KAAK,cACLY,SAAUX,KAAKP,YACfmB,YAAY,gBACd,8BACEC,KAAK,IACLL,UAAU,eACVT,KAAK,cACLY,SAAUX,KAAKP,YACfmB,YAAY,gBAEd,4BAAQJ,UAAU,iBAChB,4BAAQX,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,SAEF,4BAAQa,KAAK,SAASF,UAAU,mBAAhC,kB,GAvDeM,cC6ERC,E,YAzEb,aAAe,IAAD,8BACZ,+CACK3B,MAAQ,CACX4B,WAEF,EAAKC,QAAU,EAAKA,QAAQvB,KAAb,gBALH,E,qEAQNwB,GACNlB,KAAKC,SAAS,CAAEe,MAAM,GAAD,mBAAMhB,KAAKZ,MAAM4B,OAAjB,CAAwBE,Q,iCAEpCC,GACLC,OAAOC,QAAQ,kBACjBrB,KAAKC,SAAS,CAAEe,MAAOhB,KAAKZ,MAAM4B,MAAMM,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAML,S,+BAIzD,IAAD,OACDM,EAAQzB,KAAKZ,MAAM4B,MAAMU,KAAI,SAACR,EAAMC,GACxC,OACE,yBAAKX,UAAU,WAAWmB,IAAKR,GAC7B,yBAAKX,UAAU,aACb,yBAAKA,UAAU,eACb,4BACIU,EAAK7B,OAET,0BAAMmB,UAAU,sCACZU,EAAK1B,WAGX,yBAAKgB,UAAU,aACb,2BAAKU,EAAK3B,aACV,8BAAQ2B,EAAK5B,cAEf,yBAAKkB,UAAU,eACb,4BACEA,UAAU,iBACVoB,QAAS,EAAKC,WAAWnC,KAAK,EAAMyB,IAFtC,gBAUV,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAEhB,yBAAKA,UAAU,yCACb,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YAAd,UAEE,0BAAMA,UAAU,sCACXR,KAAKZ,MAAM4B,MAAMc,YAM9B,0BAAMtB,UAAU,aACd,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAUJ,UAAWJ,KAAKiB,WAE5B,yBAAKT,UAAU,YACXiB,S,GAlEIX,aCOEiB,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.86bbdb62.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './TodoForm.css';\r\nclass TodoForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      title: '',\r\n      responsible: '',\r\n      description: '',\r\n      priority: 'normal'\r\n    };\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleInput(e) {\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    this.setState({ [name]: value });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);\r\n    document.querySelector(\".todo-form\").reset();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"todo-form\" onSubmit={this.handleSubmit}>\r\n        <h2 className=\"text-white\">\r\n          New Task\r\n        </h2>\r\n        <input \r\n          type=\"text\" \r\n          className=\"form-control\" \r\n          name=\"title\" \r\n          onChange={this.handleInput}\r\n          placeholder=\"Title\"/>\r\n        <input \r\n          type=\"text\" \r\n          className=\"form-control\" \r\n          name=\"responsible\" \r\n          onChange={this.handleInput}\r\n          placeholder=\"Responsible\"/>\r\n        <textarea \r\n          rows=\"3\"\r\n          className=\"form-control\" \r\n          name=\"description\" \r\n          onChange={this.handleInput}\r\n          placeholder=\"Description\">\r\n        </textarea>\r\n        <select className=\"custom-select\">\r\n          <option value=\"Low\">Low</option>\r\n          <option value=\"Normal\">Normal</option>\r\n          <option value=\"High\">High</option>\r\n        </select>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Save Task</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default TodoForm;\r\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { todos } from './todos.json';\nimport TodoForm from './componets/TodoForm';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos\n    };\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  addTodo(todo) {\n    this.setState({ todos: [...this.state.todos, todo]});\n  }\n  removeTodo(index) {\n    if (window.confirm(\"Are you sure?\")) {\n      this.setState({ todos: this.state.todos.filter((t, i) => i !== index)});\n    }\n    \n  }\n  render() {\n    const tasks = this.state.todos.map((todo, index) => {\n      return (\n        <div className=\"col-md-4\" key={index}>\n          <div className=\"card my-2\">\n            <div className=\"card-header\">\n              <h3>\n                { todo.title }\n              </h3>\n              <span className=\"badge badge-pill badge-danger mx-2\">\n                { todo.priority }\n              </span>\n            </div>\n            <div className=\"card-body\">\n              <p>{ todo.description }</p> \n              <mark>{ todo.responsible }</mark> \n            </div>\n            <div className=\"card-footer\">\n              <button \n                className=\"btn btn-danger\" \n                onClick={this.removeTodo.bind(this, index)}>\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )\n    });\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <nav className=\"navbar navbar-dark bg-dark text-white\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                Tasks - \n                <span className=\"badge badge-pill badge-danger mx-2\">\n                   { this.state.todos.length } \n                </span>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <main className=\"container\">\n          <div className=\"row my-2\">\n            <TodoForm onAddTodo={this.addTodo}/>\n          </div>\n          <div className=\"row my-2\">\n            { tasks }\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}